// Generated by gencpp from file motor/motor.msg
// DO NOT EDIT!


#ifndef MOTOR_MESSAGE_MOTOR_H
#define MOTOR_MESSAGE_MOTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motor
{
template <class ContainerAllocator>
struct motor_
{
  typedef motor_<ContainerAllocator> Type;

  motor_()
    : angle(0)
    , thrust(0)  {
    }
  motor_(const ContainerAllocator& _alloc)
    : angle(0)
    , thrust(0)  {
  (void)_alloc;
    }



   typedef int16_t _angle_type;
  _angle_type angle;

   typedef int16_t _thrust_type;
  _thrust_type thrust;





  typedef boost::shared_ptr< ::motor::motor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motor::motor_<ContainerAllocator> const> ConstPtr;

}; // struct motor_

typedef ::motor::motor_<std::allocator<void> > motor;

typedef boost::shared_ptr< ::motor::motor > motorPtr;
typedef boost::shared_ptr< ::motor::motor const> motorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motor::motor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motor::motor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motor::motor_<ContainerAllocator1> & lhs, const ::motor::motor_<ContainerAllocator2> & rhs)
{
  return lhs.angle == rhs.angle &&
    lhs.thrust == rhs.thrust;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motor::motor_<ContainerAllocator1> & lhs, const ::motor::motor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::motor::motor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor::motor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor::motor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor::motor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor::motor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor::motor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motor::motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea5f193b4ccf98e6eb37e1ee5739d1ae";
  }

  static const char* value(const ::motor::motor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea5f193b4ccf98e6ULL;
  static const uint64_t static_value2 = 0xeb37e1ee5739d1aeULL;
};

template<class ContainerAllocator>
struct DataType< ::motor::motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motor/motor";
  }

  static const char* value(const ::motor::motor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motor::motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 angle\n"
"int16 thrust\n"
;
  }

  static const char* value(const ::motor::motor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motor::motor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle);
      stream.next(m.thrust);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motor::motor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motor::motor_<ContainerAllocator>& v)
  {
    s << indent << "angle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angle);
    s << indent << "thrust: ";
    Printer<int16_t>::stream(s, indent + "  ", v.thrust);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOR_MESSAGE_MOTOR_H
